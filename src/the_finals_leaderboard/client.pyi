from __future__ import annotations

import datetime
from the_finals_leaderboard import models, api
from typing import Literal, overload, Mapping, Any
from enum import StrEnum


class StaticCachingPolicy(StrEnum):
    DISABLED = "disabled"
    DISK = "disk"
    LAZY = "lazy"
    EAGER = "eager"


class Client():
    def __init__(
        self,
        static_caching_policy: Literal[StaticCachingPolicy.DISABLED, StaticCachingPolicy.DISK, StaticCachingPolicy.LAZY, StaticCachingPolicy.EAGER, "disabled", "disk", "lazy", "eager"] = StaticCachingPolicy.LAZY,
        live_caching_ttl: datetime.timedelta | int = datetime.timedelta(minutes=5),
        url: str = "https://api.the-finals-leaderboard.com",
        timeout: float = 10.0
    ): ...

    # The pit of overloads

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.CB1, "cb1"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.CB1RankedUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.CB1, "cb1"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.CB1RankedUser]: ...

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.CB2, "cb2"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.CB2RankedUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.CB2, "cb2"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.CB2RankedUser]: ...

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.OB, "ob"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.OBRankedUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.OB, "ob"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.OBRankedUser]: ...

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.S1, "s1"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season1RankedUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.S1, "s1"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season1RankedUser]: ...

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.S2, "s2"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season2RankedUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.S2, "s2"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season2RankedUser]: ...

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.S3, "s3"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season3RankedUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.S3, "s3"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season3RankedUser]: ...

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.S3ORIGINAL, "s3original"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season3RankedUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.S3ORIGINAL, "s3original"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season3RankedUser]: ...

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.S3WORLDTOUR, "s3worldtour"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season3WorldTourUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.S3WORLDTOUR, "s3worldtour"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season3WorldTourUser]: ...

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.S4, "s4"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season4RankedUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.S4, "s4"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season4RankedUser]: ...

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.S4WORLDTOUR, "s4worldtour"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season4WorldTourUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.S4WORLDTOUR, "s4worldtour"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season4WorldTourUser]: ...

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.S4SPONSOR, "s4sponsor"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season4SponsorUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.S4SPONSOR, "s4sponsor"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season4SponsorUser]: ...

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.S5, "s5"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season5RankedUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.S5, "s5"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season5RankedUser]: ...

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.S5SPONSOR, "s5sponsor"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season5SponsorUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.S5SPONSOR, "s5sponsor"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season5SponsorUser]: ...

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.S5WORLDTOUR, "s5worldtour"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season5WorldTourUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.S5WORLDTOUR, "s5worldtour"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season5WorldTourUser]: ...

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.S5TERMINALATTACK, "s5terminalattack"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season5TerminalAttackUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.S5TERMINALATTACK, "s5terminalattack"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season5TerminalAttackUser]: ...

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.S5POWERSHIFT, "s5powershift"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season5PowerShiftUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.S5POWERSHIFT, "s5powershift"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season5PowerShiftUser]: ...

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.S5QUICKCASH, "s5quickcash"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season5QuickCashUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.S5QUICKCASH, "s5quickcash"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season5QuickCashUser]: ...

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.S5BANKIT, "s5bankit"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season5BankItUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.S5BANKIT, "s5bankit"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season5BankItUser]: ...

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.S6, "s6"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season6RankedUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.S6, "s6"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season6RankedUser]: ...

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.S6SPONSOR, "s6sponsor"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season6SponsorUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.S6SPONSOR, "s6sponsor"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season6SponsorUser]: ...

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.S6WORLDTOUR, "s6worldtour"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season6WorldTourUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.S6WORLDTOUR, "s6worldtour"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season6WorldTourUser]: ...

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.S6TERMINALATTACK, "s6terminalattack"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season6TerminalAttackUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.S6TERMINALATTACK, "s6terminalattack"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season6TerminalAttackUser]: ...

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.S6POWERSHIFT, "s6powershift"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season6PowerShiftUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.S6POWERSHIFT, "s6powershift"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season6PowerShiftUser]: ...

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.S6QUICKCASH, "s6quickcash"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season6QuickCashUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.S6QUICKCASH, "s6quickcash"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season6QuickCashUser]: ...

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.S6TEAMDEATHMATCH, "s6teamdeathmatch"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season6TeamDeathmatchUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.S6TEAMDEATHMATCH, "s6teamdeathmatch"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season6TeamDeathmatchUser]: ...

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.S6HEAVYHITTERS, "s6heavyhitters"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season6HeavyHittersUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.S6HEAVYHITTERS, "s6heavyhitters"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season6HeavyHittersUser]: ...

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.S7, "s7"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season7RankedUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.S7, "s7"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season7RankedUser]: ...

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.S7SPONSOR, "s7sponsor"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season7SponsorUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.S7SPONSOR, "s7sponsor"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season7SponsorUser]: ...

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.S7WORLDTOUR, "s7worldtour"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season7WorldTourUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.S7WORLDTOUR, "s7worldtour"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season7WorldTourUser]: ...

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.S7TERMINALATTACK, "s7terminalattack"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season7TerminalAttackUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.S7TERMINALATTACK, "s7terminalattack"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season7TerminalAttackUser]: ...

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.S7POWERSHIFT, "s7powershift"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season7PowerShiftUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.S7POWERSHIFT, "s7powershift"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season7PowerShiftUser]: ...

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.S7QUICKCASH, "s7quickcash"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season7QuickCashUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.S7QUICKCASH, "s7quickcash"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season7QuickCashUser]: ...

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.S7TEAMDEATHMATCH, "s7teamdeathmatch"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season7TeamDeathmatchUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.S7TEAMDEATHMATCH, "s7teamdeathmatch"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season7TeamDeathmatchUser]: ...

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.S7BLASTOFF, "s7blastoff"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season7BlastOffUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.S7BLASTOFF, "s7blastoff"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season7BlastOffUser]: ...

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.S7CASHBALL, "s7cashball"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season7CashBallUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.S7CASHBALL, "s7cashball"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season7CashBallUser]: ...

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.S8, "s8"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season8RankedUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.S8, "s8"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season8RankedUser]: ...

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.S8SPONSOR, "s8sponsor"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season8SponsorUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.S8SPONSOR, "s8sponsor"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season8SponsorUser]: ...

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.S8WORLDTOUR, "s8worldtour"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season8WorldTourUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.S8WORLDTOUR, "s8worldtour"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season8WorldTourUser]: ...

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.S8HEAD2HEAD, "s8head2head"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season8Head2HeadUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.S8HEAD2HEAD, "s8head2head"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season8Head2HeadUser]: ...

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.S8POWERSHIFT, "s8powershift"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season8PowerShiftUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.S8POWERSHIFT, "s8powershift"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season8PowerShiftUser]: ...

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.S8QUICKCASH, "s8quickcash"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season8QuickCashUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.S8QUICKCASH, "s8quickcash"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season8QuickCashUser]: ...

    @overload
    def get_leaderboard_sync(self, leaderboard: Literal[api.Leaderboard.S8TEAMDEATHMATCH, "s8teamdeathmatch"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season8TeamDeathmatchUser]: ...
    @overload
    async def get_leaderboard_async(self, leaderboard: Literal[api.Leaderboard.S8TEAMDEATHMATCH, "s8teamdeathmatch"], platform: api.Platform | Literal["crossplay", "steam", "xbox", "psn"] | None = None, ignore_cache: bool = False, /, **filters: Any) -> api.LeaderboardResult[models.Season8TeamDeathmatchUser]: ...
